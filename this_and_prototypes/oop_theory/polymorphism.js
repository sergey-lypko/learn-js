// ПОЛИМОРФИЗМ
// аспект 1: идея того, что любой метод может ссылаться на другой метод
// (с таким же именем или нет) по иерархии наследоваания

// аспект 2: имя метода может иметь несколько определений на раазных
// уровнях цепочки наследования и эти определния автоматически выбираются
// как подходящие во время соответствующих вызовов

// псевдокод
class Vehicle {
  engines = 1

  ignition() {
    output('turning on my engine')
  }

  drive() {
    ignition()
    output('starting and moving forward')
  }
}

class SpeedBot inherits Vehicle {
  engines = 2

  ignition() {
    output('turning on my engines', engines)
  }

  pilot() {
    // relative polymorphism reference на drive
    // но будет использоваться ignition SpeedBot

    // вот эти полиморфные манипуляции будут зависить от уровня
    // и соответствующего класса & метода в цепочке наследования
    inherited: drive()

    output('Moving throw the water')
  }
}

// NOTE: важно отметить, что при наследовании классов наследование
// происходит именно между классами, но не между объектами, которые
// будут потенциально инициализированы с помщью этих классов
// эта относительная ссылка обычно называется super

// NOTE: классовое наследоваание в традиционном ООП подраазумевает копирование
// при наследовании, в родительский класс копируются
// (некоторые методы перезаписываются), необходимые данные
// таким образом super - это указатель откуда копировать при нааследовании,
// но не такая ссылка, которая указывает откуда заимствовать (это скорее про JS)
